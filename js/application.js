// Generated by CoffeeScript 1.3.3
(function() {
  var Analyzer, REFRESH_RATE, TWEETS_PER_PAGE, addToInterface, analyzer, grabTweets, lastMaxId, negativeCount, neutralCount, positiveCount, processTweets, searchTerm, timeOut;

  Analyzer = (function() {

    function Analyzer(dictionary_path) {
      var caller;
      this.afinn = {};
      this.queue = [];
      this.running = false;
      this.ready = false;
      caller = this;
      $.get(dictionary_path, function(data) {
        var line, lines, value, word, _i, _len, _ref;
        lines = data.split('\n');
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          _ref = line.split('\t'), word = _ref[0], value = _ref[1];
          caller.afinn[word] = parseInt(value);
        }
        caller.ready = true;
        return caller.work();
      });
    }

    Analyzer.prototype.analyze = function(text, metadata, callback) {
      var s, sentiments, sqrt, sum, word, words, _i, _j, _len, _len1;
      words = text.toLowerCase().split(/\W+/);
      sentiments = [];
      for (_i = 0, _len = words.length; _i < _len; _i++) {
        word = words[_i];
        if (this.afinn[word] !== void 0) {
          sentiments.push(this.afinn[word]);
        }
      }
      sum = 0;
      for (_j = 0, _len1 = sentiments.length; _j < _len1; _j++) {
        s = sentiments[_j];
        sum += s;
      }
      sqrt = Math.sqrt(sentiments.length);
      return callback(text, metadata, sum / sqrt);
    };

    Analyzer.prototype.addToQueue = function(text, metadata, callback) {
      this.queue.push({
        'text': text,
        'metadata': metadata,
        'callback': callback
      });
      if (!this.running && this.ready) {
        return this.work();
      }
    };

    Analyzer.prototype.work = function() {
      var job;
      this.running = true;
      while (this.queue.length > 0) {
        job = this.queue.shift();
        this.analyze(job.text, job.metadata, job.callback);
      }
      return this.running = false;
    };

    return Analyzer;

  })();

  REFRESH_RATE = 10 * 1000;

  TWEETS_PER_PAGE = 100;

  searchTerm = '';

  analyzer = new Analyzer('AFINN-111-emo.txt');

  lastMaxId = 0;

  timeOut = null;

  positiveCount = 0;

  negativeCount = 0;

  neutralCount = 0;

  grabTweets = function() {
    return $.getJSON('http://search.twitter.com/search.json?callback=?', {
      'q': searchTerm,
      'result_type': 'recent',
      'since_id': lastMaxId,
      'rpp': TWEETS_PER_PAGE
    }, function(data) {
      return processTweets(data);
    });
  };

  processTweets = function(data) {
    var tweet, _i, _len, _ref;
    if (data['error'] !== void 0) {
      return timeOut = setTimeout(grabTweets, REFRESH_RATE);
    }
    lastMaxId = data['max_id_str'];
    _ref = data['results'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tweet = _ref[_i];
      if (tweet['iso_language_code'] === "en") {
        analyzer.addToQueue(tweet['text'], tweet, addToInterface);
      }
    }
    return timeOut = setTimeout(grabTweets, REFRESH_RATE);
  };

  addToInterface = function(tweet, metadata, sentiment) {
    var emotion;
    emotion = sentiment > 0 ? 'positive' : sentiment < 0 ? 'negative' : 'neutral';
    switch (emotion) {
      case 'positive':
        positiveCount++;
        break;
      case 'negative':
        negativeCount++;
        break;
      case 'neutral':
        neutralCount++;
    }
    return $("<div class='tweet " + emotion + "''>" + "<img src='" + metadata['profile_image_url'] + "' class='avatar'>" + "<strong>@" + metadata['from_user'] + "</strong><br>" + tweet + "<div class='clear'></div></div>").hide().prependTo('#results').slideDown("slow");
  };

  $(document).ready(function() {
    return $('#searchButton').click(function() {
      clearTimeout(timeOut);
      $('#results').html('');
      searchTerm = $("#searchTerm").val();
      return grabTweets();
    });
  });

}).call(this);
